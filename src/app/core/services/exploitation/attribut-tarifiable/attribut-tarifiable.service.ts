import { Injectable } from "@angular/core";
import { catchError, Observable, of, ReplaySubject, tap } from "rxjs";
import { environment } from "@env/environment";
import { HttpClient } from "@angular/common/http";
import { AttributTarifiable } from "./attribut-tarifiable.model";

@Injectable({
    providedIn: 'root'
})
export class AttributTarifiableService {

    baseUrl = environment.exploitation_url + '/inter-services/attributs-tarifiables/schema';
    private _attributTarifiable: ReplaySubject<AttributTarifiable> = new ReplaySubject<AttributTarifiable>(1);
    private _attributTarifiables: ReplaySubject<AttributTarifiable[]> = new ReplaySubject<AttributTarifiable[]>(1);

    set attributTarifiable(value: AttributTarifiable) {
        this._attributTarifiable.next(value);
    }

    get attributTarifiable$() {
        return this._attributTarifiable.asObservable();
    }

    set attributTarifiables(value: AttributTarifiable[]) {
        this._attributTarifiables.next(value);
    }

    get attributTarifiables$() {
        return this._attributTarifiables.asObservable();
    }

    constructor(
        private _httpClient: HttpClient
    ) { }

    getAll(): Observable<AttributTarifiable[]> {
        return this._httpClient.get<AttributTarifiable[]>(`${this.baseUrl}?all=true`)
        .pipe(
            tap((response : any) => {
                this.attributTarifiables = response.map((item: AttributTarifiable) => {
                    return item;
                });
                return response;
            }),
            catchError(() => of([] as AttributTarifiable[]))
        );
    }
}
