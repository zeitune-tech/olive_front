export class OptionAttributResponse {
  valeur: string;
  libelle: string;
  description: string;
  actif: boolean;

  constructor(option: Partial<OptionAttributResponse> = {}) {
    Object.assign(this, option);
    this.valeur = option.valeur || '';
    this.libelle = option.libelle || '';
    this.description = option.description || '';
    this.actif = option.actif ?? true; // Par défaut actif = true
  }
}


export class TypeAttributResponse {
  type: string; // TEXT, NUMERIC, ENUMERATED, REFERENCE

  // Pour les types numériques
  isFloating: boolean;
  decimalPlaces: number;

  // Pour les énumérations
  options: OptionAttributResponse[];

  // Pour les références à des tables
  nomTable: string;
  colonneKey: string;
  colonneValue: string;

  constructor(entity: Partial<TypeAttributResponse>) {
    Object.assign(this, entity);

    this.type = entity.type || '';
    this.isFloating = entity.isFloating ?? false;
    this.decimalPlaces = entity.decimalPlaces ?? 0;

    this.options = entity.options || [];

    this.nomTable = entity.nomTable || '';
    this.colonneKey = entity.colonneKey || '';
    this.colonneValue = entity.colonneValue || '';
  }
}



export class AttributTarifiable {
  nom: string;
  libelle: string;
  description: string;
  entite: string;
  chemin: string;
  obligatoire: boolean;
  groupeAffichage: string;
  ordreAffichage: number;
  type: TypeAttributResponse;


    constructor(entity: Partial<AttributTarifiable>) {
        Object.assign(this, entity);
        this.nom = entity.nom || '';
        this.libelle = entity.libelle || '';
        this.description = entity.description || '';
        this.entite = entity.entite || '';
        this.chemin = entity.chemin || '';
        this.obligatoire = entity.obligatoire || false;
        this.groupeAffichage = entity.groupeAffichage || '';
        this.ordreAffichage = entity.ordreAffichage || 0;
        this.type = entity.type ? new TypeAttributResponse(entity.type) : new TypeAttributResponse({});
    }
}
